type Query {
  players: [Player!]!
  player(id: ID!): Player!
  alliances: [Alliance!]!
  alliance(id: ID!): Alliance!
  habitats: [Habitat!]!
  habitat(id: ID!): Habitat!
}

type Mutation {
  createPlayer(data: CreatePlayerInput!): Player!
  createAlliance(data: CreateAllianceInput!): Alliance!
  createHabitat(data: CreateHabitatInput!): Habitat!
  deletePlayer(number: Int!): Player!
  deleteAlliance(number: Int!): Alliance!
  deleteHabitat(number: Int!): Habitat!
}

input CreatePlayerInput {
  number: Int!
  nick: String!
}

type Player {
  nick: String!
  number: Int!
  habitatIDs: [Habitat!]
  alliance: Alliance
}

input CreateAllianceInput {
  number: Int!
  name: String!
  points: Float!
}

type Alliance {
  nickname: String!
  number: Int!
  playerArray: [Player!]!
  points: Float!
}

input CreateHabitatInput {
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

type Habitat {
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
  player: Player
}