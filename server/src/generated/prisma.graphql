type AggregateAlliance {
  count: Int!
}

type AggregateHabitat {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type Alliance {
  id: ID!
  number: Int!
  name: String!
  playerArray(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  points: Float!
}

type AllianceConnection {
  pageInfo: PageInfo!
  edges: [AllianceEdge]!
  aggregate: AggregateAlliance!
}

input AllianceCreateInput {
  number: Int!
  name: String!
  playerArray: PlayerCreateManyWithoutAllianceInput
  points: Float!
}

input AllianceCreateOneWithoutPlayerArrayInput {
  create: AllianceCreateWithoutPlayerArrayInput
  connect: AllianceWhereUniqueInput
}

input AllianceCreateWithoutPlayerArrayInput {
  number: Int!
  name: String!
  points: Float!
}

type AllianceEdge {
  node: Alliance!
  cursor: String!
}

enum AllianceOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  name_ASC
  name_DESC
  points_ASC
  points_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AlliancePreviousValues {
  id: ID!
  number: Int!
  name: String!
  points: Float!
}

type AllianceSubscriptionPayload {
  mutation: MutationType!
  node: Alliance
  updatedFields: [String!]
  previousValues: AlliancePreviousValues
}

input AllianceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AllianceWhereInput
  AND: [AllianceSubscriptionWhereInput!]
  OR: [AllianceSubscriptionWhereInput!]
  NOT: [AllianceSubscriptionWhereInput!]
}

input AllianceUpdateInput {
  number: Int
  name: String
  playerArray: PlayerUpdateManyWithoutAllianceInput
  points: Float
}

input AllianceUpdateManyMutationInput {
  number: Int
  name: String
  points: Float
}

input AllianceUpdateOneRequiredWithoutPlayerArrayInput {
  create: AllianceCreateWithoutPlayerArrayInput
  update: AllianceUpdateWithoutPlayerArrayDataInput
  upsert: AllianceUpsertWithoutPlayerArrayInput
  connect: AllianceWhereUniqueInput
}

input AllianceUpdateWithoutPlayerArrayDataInput {
  number: Int
  name: String
  points: Float
}

input AllianceUpsertWithoutPlayerArrayInput {
  update: AllianceUpdateWithoutPlayerArrayDataInput!
  create: AllianceCreateWithoutPlayerArrayInput!
}

input AllianceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  playerArray_every: PlayerWhereInput
  playerArray_some: PlayerWhereInput
  playerArray_none: PlayerWhereInput
  points: Float
  points_not: Float
  points_in: [Float!]
  points_not_in: [Float!]
  points_lt: Float
  points_lte: Float
  points_gt: Float
  points_gte: Float
  AND: [AllianceWhereInput!]
  OR: [AllianceWhereInput!]
  NOT: [AllianceWhereInput!]
}

input AllianceWhereUniqueInput {
  id: ID
  number: Int
}

type BatchPayload {
  count: Long!
}

type Habitat {
  id: ID!
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
  player: Player
}

type HabitatConnection {
  pageInfo: PageInfo!
  edges: [HabitatEdge]!
  aggregate: AggregateHabitat!
}

input HabitatCreateInput {
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
  player: PlayerCreateOneWithoutHabitatIDsInput
}

input HabitatCreateManyWithoutPlayerInput {
  create: [HabitatCreateWithoutPlayerInput!]
  connect: [HabitatWhereUniqueInput!]
}

input HabitatCreateWithoutPlayerInput {
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

type HabitatEdge {
  node: Habitat!
  cursor: String!
}

enum HabitatOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  mapX_ASC
  mapX_DESC
  mapY_ASC
  mapY_DESC
  creationDate_ASC
  creationDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HabitatPreviousValues {
  id: ID!
  number: Int!
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

input HabitatScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  mapX: Float
  mapX_not: Float
  mapX_in: [Float!]
  mapX_not_in: [Float!]
  mapX_lt: Float
  mapX_lte: Float
  mapX_gt: Float
  mapX_gte: Float
  mapY: Float
  mapY_not: Float
  mapY_in: [Float!]
  mapY_not_in: [Float!]
  mapY_lt: Float
  mapY_lte: Float
  mapY_gt: Float
  mapY_gte: Float
  creationDate: String
  creationDate_not: String
  creationDate_in: [String!]
  creationDate_not_in: [String!]
  creationDate_lt: String
  creationDate_lte: String
  creationDate_gt: String
  creationDate_gte: String
  creationDate_contains: String
  creationDate_not_contains: String
  creationDate_starts_with: String
  creationDate_not_starts_with: String
  creationDate_ends_with: String
  creationDate_not_ends_with: String
  AND: [HabitatScalarWhereInput!]
  OR: [HabitatScalarWhereInput!]
  NOT: [HabitatScalarWhereInput!]
}

type HabitatSubscriptionPayload {
  mutation: MutationType!
  node: Habitat
  updatedFields: [String!]
  previousValues: HabitatPreviousValues
}

input HabitatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HabitatWhereInput
  AND: [HabitatSubscriptionWhereInput!]
  OR: [HabitatSubscriptionWhereInput!]
  NOT: [HabitatSubscriptionWhereInput!]
}

input HabitatUpdateInput {
  number: Int
  mapX: Float
  mapY: Float
  creationDate: String
  player: PlayerUpdateOneWithoutHabitatIDsInput
}

input HabitatUpdateManyDataInput {
  number: Int
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateManyMutationInput {
  number: Int
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateManyWithoutPlayerInput {
  create: [HabitatCreateWithoutPlayerInput!]
  delete: [HabitatWhereUniqueInput!]
  connect: [HabitatWhereUniqueInput!]
  disconnect: [HabitatWhereUniqueInput!]
  update: [HabitatUpdateWithWhereUniqueWithoutPlayerInput!]
  upsert: [HabitatUpsertWithWhereUniqueWithoutPlayerInput!]
  deleteMany: [HabitatScalarWhereInput!]
  updateMany: [HabitatUpdateManyWithWhereNestedInput!]
}

input HabitatUpdateManyWithWhereNestedInput {
  where: HabitatScalarWhereInput!
  data: HabitatUpdateManyDataInput!
}

input HabitatUpdateWithoutPlayerDataInput {
  number: Int
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateWithWhereUniqueWithoutPlayerInput {
  where: HabitatWhereUniqueInput!
  data: HabitatUpdateWithoutPlayerDataInput!
}

input HabitatUpsertWithWhereUniqueWithoutPlayerInput {
  where: HabitatWhereUniqueInput!
  update: HabitatUpdateWithoutPlayerDataInput!
  create: HabitatCreateWithoutPlayerInput!
}

input HabitatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  mapX: Float
  mapX_not: Float
  mapX_in: [Float!]
  mapX_not_in: [Float!]
  mapX_lt: Float
  mapX_lte: Float
  mapX_gt: Float
  mapX_gte: Float
  mapY: Float
  mapY_not: Float
  mapY_in: [Float!]
  mapY_not_in: [Float!]
  mapY_lt: Float
  mapY_lte: Float
  mapY_gt: Float
  mapY_gte: Float
  creationDate: String
  creationDate_not: String
  creationDate_in: [String!]
  creationDate_not_in: [String!]
  creationDate_lt: String
  creationDate_lte: String
  creationDate_gt: String
  creationDate_gte: String
  creationDate_contains: String
  creationDate_not_contains: String
  creationDate_starts_with: String
  creationDate_not_starts_with: String
  creationDate_ends_with: String
  creationDate_not_ends_with: String
  player: PlayerWhereInput
  AND: [HabitatWhereInput!]
  OR: [HabitatWhereInput!]
  NOT: [HabitatWhereInput!]
}

input HabitatWhereUniqueInput {
  id: ID
  number: Int
}

scalar Long

type Mutation {
  createAlliance(data: AllianceCreateInput!): Alliance!
  updateAlliance(data: AllianceUpdateInput!, where: AllianceWhereUniqueInput!): Alliance
  updateManyAlliances(data: AllianceUpdateManyMutationInput!, where: AllianceWhereInput): BatchPayload!
  upsertAlliance(where: AllianceWhereUniqueInput!, create: AllianceCreateInput!, update: AllianceUpdateInput!): Alliance!
  deleteAlliance(where: AllianceWhereUniqueInput!): Alliance
  deleteManyAlliances(where: AllianceWhereInput): BatchPayload!
  createHabitat(data: HabitatCreateInput!): Habitat!
  updateHabitat(data: HabitatUpdateInput!, where: HabitatWhereUniqueInput!): Habitat
  updateManyHabitats(data: HabitatUpdateManyMutationInput!, where: HabitatWhereInput): BatchPayload!
  upsertHabitat(where: HabitatWhereUniqueInput!, create: HabitatCreateInput!, update: HabitatUpdateInput!): Habitat!
  deleteHabitat(where: HabitatWhereUniqueInput!): Habitat
  deleteManyHabitats(where: HabitatWhereInput): BatchPayload!
  createPlayer(data: PlayerCreateInput!): Player!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player {
  id: ID!
  number: Int!
  nick: String!
  habitatIDs(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habitat!]
  alliance: Alliance!
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  number: Int!
  nick: String!
  habitatIDs: HabitatCreateManyWithoutPlayerInput
  alliance: AllianceCreateOneWithoutPlayerArrayInput!
}

input PlayerCreateManyWithoutAllianceInput {
  create: [PlayerCreateWithoutAllianceInput!]
  connect: [PlayerWhereUniqueInput!]
}

input PlayerCreateOneWithoutHabitatIDsInput {
  create: PlayerCreateWithoutHabitatIDsInput
  connect: PlayerWhereUniqueInput
}

input PlayerCreateWithoutAllianceInput {
  number: Int!
  nick: String!
  habitatIDs: HabitatCreateManyWithoutPlayerInput
}

input PlayerCreateWithoutHabitatIDsInput {
  number: Int!
  nick: String!
  alliance: AllianceCreateOneWithoutPlayerArrayInput!
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  nick_ASC
  nick_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlayerPreviousValues {
  id: ID!
  number: Int!
  nick: String!
}

input PlayerScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  AND: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  NOT: [PlayerScalarWhereInput!]
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
  OR: [PlayerSubscriptionWhereInput!]
  NOT: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateInput {
  number: Int
  nick: String
  habitatIDs: HabitatUpdateManyWithoutPlayerInput
  alliance: AllianceUpdateOneRequiredWithoutPlayerArrayInput
}

input PlayerUpdateManyDataInput {
  number: Int
  nick: String
}

input PlayerUpdateManyMutationInput {
  number: Int
  nick: String
}

input PlayerUpdateManyWithoutAllianceInput {
  create: [PlayerCreateWithoutAllianceInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutAllianceInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutAllianceInput!]
  deleteMany: [PlayerScalarWhereInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput!
  data: PlayerUpdateManyDataInput!
}

input PlayerUpdateOneWithoutHabitatIDsInput {
  create: PlayerCreateWithoutHabitatIDsInput
  update: PlayerUpdateWithoutHabitatIDsDataInput
  upsert: PlayerUpsertWithoutHabitatIDsInput
  delete: Boolean
  disconnect: Boolean
  connect: PlayerWhereUniqueInput
}

input PlayerUpdateWithoutAllianceDataInput {
  number: Int
  nick: String
  habitatIDs: HabitatUpdateManyWithoutPlayerInput
}

input PlayerUpdateWithoutHabitatIDsDataInput {
  number: Int
  nick: String
  alliance: AllianceUpdateOneRequiredWithoutPlayerArrayInput
}

input PlayerUpdateWithWhereUniqueWithoutAllianceInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateWithoutAllianceDataInput!
}

input PlayerUpsertWithoutHabitatIDsInput {
  update: PlayerUpdateWithoutHabitatIDsDataInput!
  create: PlayerCreateWithoutHabitatIDsInput!
}

input PlayerUpsertWithWhereUniqueWithoutAllianceInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateWithoutAllianceDataInput!
  create: PlayerCreateWithoutAllianceInput!
}

input PlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  habitatIDs_every: HabitatWhereInput
  habitatIDs_some: HabitatWhereInput
  habitatIDs_none: HabitatWhereInput
  alliance: AllianceWhereInput
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
}

input PlayerWhereUniqueInput {
  id: ID
  number: Int
}

type Query {
  alliance(where: AllianceWhereUniqueInput!): Alliance
  alliances(where: AllianceWhereInput, orderBy: AllianceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Alliance]!
  alliancesConnection(where: AllianceWhereInput, orderBy: AllianceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AllianceConnection!
  habitat(where: HabitatWhereUniqueInput!): Habitat
  habitats(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habitat]!
  habitatsConnection(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HabitatConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  node(id: ID!): Node
}

type Subscription {
  alliance(where: AllianceSubscriptionWhereInput): AllianceSubscriptionPayload
  habitat(where: HabitatSubscriptionWhereInput): HabitatSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
}
