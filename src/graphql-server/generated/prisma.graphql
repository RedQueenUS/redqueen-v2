type AggregateAlliance {
  count: Int!
}

type AggregateHabitat {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Alliance {
  id: ID!
  name: String!
  playerArray(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  points: Float!
}

type AllianceConnection {
  pageInfo: PageInfo!
  edges: [AllianceEdge]!
  aggregate: AggregateAlliance!
}

input AllianceCreateInput {
  name: String!
  playerArray: PlayerCreateManyInput
  points: Float!
}

type AllianceEdge {
  node: Alliance!
  cursor: String!
}

enum AllianceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  points_ASC
  points_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AlliancePreviousValues {
  id: ID!
  name: String!
  points: Float!
}

type AllianceSubscriptionPayload {
  mutation: MutationType!
  node: Alliance
  updatedFields: [String!]
  previousValues: AlliancePreviousValues
}

input AllianceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AllianceWhereInput
  AND: [AllianceSubscriptionWhereInput!]
  OR: [AllianceSubscriptionWhereInput!]
  NOT: [AllianceSubscriptionWhereInput!]
}

input AllianceUpdateInput {
  name: String
  playerArray: PlayerUpdateManyInput
  points: Float
}

input AllianceUpdateManyMutationInput {
  name: String
  points: Float
}

input AllianceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  playerArray_every: PlayerWhereInput
  playerArray_some: PlayerWhereInput
  playerArray_none: PlayerWhereInput
  points: Float
  points_not: Float
  points_in: [Float!]
  points_not_in: [Float!]
  points_lt: Float
  points_lte: Float
  points_gt: Float
  points_gte: Float
  AND: [AllianceWhereInput!]
  OR: [AllianceWhereInput!]
  NOT: [AllianceWhereInput!]
}

input AllianceWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type Habitat {
  id: ID!
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

type HabitatConnection {
  pageInfo: PageInfo!
  edges: [HabitatEdge]!
  aggregate: AggregateHabitat!
}

input HabitatCreateInput {
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

input HabitatCreateManyInput {
  create: [HabitatCreateInput!]
  connect: [HabitatWhereUniqueInput!]
}

type HabitatEdge {
  node: Habitat!
  cursor: String!
}

enum HabitatOrderByInput {
  id_ASC
  id_DESC
  mapX_ASC
  mapX_DESC
  mapY_ASC
  mapY_DESC
  creationDate_ASC
  creationDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HabitatPreviousValues {
  id: ID!
  mapX: Float!
  mapY: Float!
  creationDate: String!
}

type HabitatSubscriptionPayload {
  mutation: MutationType!
  node: Habitat
  updatedFields: [String!]
  previousValues: HabitatPreviousValues
}

input HabitatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HabitatWhereInput
  AND: [HabitatSubscriptionWhereInput!]
  OR: [HabitatSubscriptionWhereInput!]
  NOT: [HabitatSubscriptionWhereInput!]
}

input HabitatUpdateDataInput {
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateInput {
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateManyInput {
  create: [HabitatCreateInput!]
  update: [HabitatUpdateWithWhereUniqueNestedInput!]
  upsert: [HabitatUpsertWithWhereUniqueNestedInput!]
  delete: [HabitatWhereUniqueInput!]
  connect: [HabitatWhereUniqueInput!]
  disconnect: [HabitatWhereUniqueInput!]
}

input HabitatUpdateManyMutationInput {
  mapX: Float
  mapY: Float
  creationDate: String
}

input HabitatUpdateWithWhereUniqueNestedInput {
  where: HabitatWhereUniqueInput!
  data: HabitatUpdateDataInput!
}

input HabitatUpsertWithWhereUniqueNestedInput {
  where: HabitatWhereUniqueInput!
  update: HabitatUpdateDataInput!
  create: HabitatCreateInput!
}

input HabitatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mapX: Float
  mapX_not: Float
  mapX_in: [Float!]
  mapX_not_in: [Float!]
  mapX_lt: Float
  mapX_lte: Float
  mapX_gt: Float
  mapX_gte: Float
  mapY: Float
  mapY_not: Float
  mapY_in: [Float!]
  mapY_not_in: [Float!]
  mapY_lt: Float
  mapY_lte: Float
  mapY_gt: Float
  mapY_gte: Float
  creationDate: String
  creationDate_not: String
  creationDate_in: [String!]
  creationDate_not_in: [String!]
  creationDate_lt: String
  creationDate_lte: String
  creationDate_gt: String
  creationDate_gte: String
  creationDate_contains: String
  creationDate_not_contains: String
  creationDate_starts_with: String
  creationDate_not_starts_with: String
  creationDate_ends_with: String
  creationDate_not_ends_with: String
  AND: [HabitatWhereInput!]
  OR: [HabitatWhereInput!]
  NOT: [HabitatWhereInput!]
}

input HabitatWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAlliance(data: AllianceCreateInput!): Alliance!
  updateAlliance(data: AllianceUpdateInput!, where: AllianceWhereUniqueInput!): Alliance
  updateManyAlliances(data: AllianceUpdateManyMutationInput!, where: AllianceWhereInput): BatchPayload!
  upsertAlliance(where: AllianceWhereUniqueInput!, create: AllianceCreateInput!, update: AllianceUpdateInput!): Alliance!
  deleteAlliance(where: AllianceWhereUniqueInput!): Alliance
  deleteManyAlliances(where: AllianceWhereInput): BatchPayload!
  createHabitat(data: HabitatCreateInput!): Habitat!
  updateHabitat(data: HabitatUpdateInput!, where: HabitatWhereUniqueInput!): Habitat
  updateManyHabitats(data: HabitatUpdateManyMutationInput!, where: HabitatWhereInput): BatchPayload!
  upsertHabitat(where: HabitatWhereUniqueInput!, create: HabitatCreateInput!, update: HabitatUpdateInput!): Habitat!
  deleteHabitat(where: HabitatWhereUniqueInput!): Habitat
  deleteManyHabitats(where: HabitatWhereInput): BatchPayload!
  createPlayer(data: PlayerCreateInput!): Player!
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player {
  id: ID!
  nick: String!
  habitatIDs(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habitat!]
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  nick: String!
  habitatIDs: HabitatCreateManyInput
}

input PlayerCreateManyInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  nick_ASC
  nick_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlayerPreviousValues {
  id: ID!
  nick: String!
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
  OR: [PlayerSubscriptionWhereInput!]
  NOT: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateDataInput {
  nick: String
  habitatIDs: HabitatUpdateManyInput
}

input PlayerUpdateInput {
  nick: String
  habitatIDs: HabitatUpdateManyInput
}

input PlayerUpdateManyInput {
  create: [PlayerCreateInput!]
  update: [PlayerUpdateWithWhereUniqueNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueNestedInput!]
  delete: [PlayerWhereUniqueInput!]
  connect: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
}

input PlayerUpdateManyMutationInput {
  nick: String
}

input PlayerUpdateWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateDataInput!
}

input PlayerUpsertWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateDataInput!
  create: PlayerCreateInput!
}

input PlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nick: String
  nick_not: String
  nick_in: [String!]
  nick_not_in: [String!]
  nick_lt: String
  nick_lte: String
  nick_gt: String
  nick_gte: String
  nick_contains: String
  nick_not_contains: String
  nick_starts_with: String
  nick_not_starts_with: String
  nick_ends_with: String
  nick_not_ends_with: String
  habitatIDs_every: HabitatWhereInput
  habitatIDs_some: HabitatWhereInput
  habitatIDs_none: HabitatWhereInput
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  alliance(where: AllianceWhereUniqueInput!): Alliance
  alliances(where: AllianceWhereInput, orderBy: AllianceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Alliance]!
  alliancesConnection(where: AllianceWhereInput, orderBy: AllianceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AllianceConnection!
  habitat(where: HabitatWhereUniqueInput!): Habitat
  habitats(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Habitat]!
  habitatsConnection(where: HabitatWhereInput, orderBy: HabitatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HabitatConnection!
  player(where: PlayerWhereUniqueInput!): Player
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  alliance(where: AllianceSubscriptionWhereInput): AllianceSubscriptionPayload
  habitat(where: HabitatSubscriptionWhereInput): HabitatSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
