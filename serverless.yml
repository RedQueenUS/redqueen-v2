service: new 
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  timeout: 60
  profile: ${env:AWS_PROFILE}
  region: ${env:MY_AWS_REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:*"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:${env:MY_AWS_REGION}:${env:AWS_ACCOUNTID}:${env:SQS_QUEUE_NAME}
    - Effect: "Allow"
      Action: 
        - "s3:*"
      Resource: "arn:aws:s3:::${env:BUCKET_NAME}/*"
plugins:
  - serverless-dotenv-plugin
  - serverless-sqs-alarms-plugin
  - serverless-offline
package:
  excludeDevDependencies: false
  include:
   - src/**
  exclude:
    - docs/**
    - helpers/**
    - test/**
functions:
  launch:
    handler: handler.launch
    description: This function will also be self-triggered on schedule & will launch the whole process.
    cron:  
      active: true
      value: '30 18 * * *'
  deserialize:
    handler: handler.deserialize
    description: This function will be triggerred by SQS. Get a .gz file in S3, unzip & parse it to JSON & put the JSON file back in S3.
    events: 
      - sqs: arn:aws:sqs:${env:MY_AWS_REGION}:${env:AWS_ACCOUNTID}:${env:SQS_QUEUE_NAME}
  populate:
    handler: handler.populate
    description: This function will be triggerred by SQS. Get JSON file in S3, convert it to CSV file, connect to RDS Mysql and populate a table.
    events: 
      - sqs: arn:aws:sqs:${env:MY_AWS_REGION}:${env:AWS_ACCOUNTID}:${env:SQS_QUEUE_NAME}
resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 60
        QueueName: ${env:SQS_QUEUE_NAME}